// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package player

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlayerServiceClient is the client API for PlayerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayerServiceClient interface {
	CreatePlayer(ctx context.Context, in *CreatePlayerRequest, opts ...grpc.CallOption) (*Empty, error)
	UpdatePlayerExistingRecord(ctx context.Context, in *UpdatePlayerRequest, opts ...grpc.CallOption) (*Empty, error)
	GetPlayerById(ctx context.Context, in *GetPlayerByIdRequest, opts ...grpc.CallOption) (*GetPlayerByIdResponse, error)
	GetPlayerByPhoneNumber(ctx context.Context, in *GetPlayerByPhoneNumberRequest, opts ...grpc.CallOption) (*GetPlayerByIdResponse, error)
	GetPlayerByJerseyNumber(ctx context.Context, in *GetPlayerUsingJerseyNumberRequest, opts ...grpc.CallOption) (*GetPlayerByIdResponse, error)
	DeletePlayer(ctx context.Context, in *DeletePlayerRequest, opts ...grpc.CallOption) (*Empty, error)
	CompleteKyc(ctx context.Context, in *UpdateKyc, opts ...grpc.CallOption) (*Empty, error)
}

type playerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayerServiceClient(cc grpc.ClientConnInterface) PlayerServiceClient {
	return &playerServiceClient{cc}
}

func (c *playerServiceClient) CreatePlayer(ctx context.Context, in *CreatePlayerRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/player.PlayerService/CreatePlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) UpdatePlayerExistingRecord(ctx context.Context, in *UpdatePlayerRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/player.PlayerService/UpdatePlayerExistingRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) GetPlayerById(ctx context.Context, in *GetPlayerByIdRequest, opts ...grpc.CallOption) (*GetPlayerByIdResponse, error) {
	out := new(GetPlayerByIdResponse)
	err := c.cc.Invoke(ctx, "/player.PlayerService/GetPlayerById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) GetPlayerByPhoneNumber(ctx context.Context, in *GetPlayerByPhoneNumberRequest, opts ...grpc.CallOption) (*GetPlayerByIdResponse, error) {
	out := new(GetPlayerByIdResponse)
	err := c.cc.Invoke(ctx, "/player.PlayerService/GetPlayerByPhoneNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) GetPlayerByJerseyNumber(ctx context.Context, in *GetPlayerUsingJerseyNumberRequest, opts ...grpc.CallOption) (*GetPlayerByIdResponse, error) {
	out := new(GetPlayerByIdResponse)
	err := c.cc.Invoke(ctx, "/player.PlayerService/GetPlayerByJerseyNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) DeletePlayer(ctx context.Context, in *DeletePlayerRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/player.PlayerService/DeletePlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) CompleteKyc(ctx context.Context, in *UpdateKyc, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/player.PlayerService/CompleteKyc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayerServiceServer is the server API for PlayerService service.
// All implementations must embed UnimplementedPlayerServiceServer
// for forward compatibility
type PlayerServiceServer interface {
	CreatePlayer(context.Context, *CreatePlayerRequest) (*Empty, error)
	UpdatePlayerExistingRecord(context.Context, *UpdatePlayerRequest) (*Empty, error)
	GetPlayerById(context.Context, *GetPlayerByIdRequest) (*GetPlayerByIdResponse, error)
	GetPlayerByPhoneNumber(context.Context, *GetPlayerByPhoneNumberRequest) (*GetPlayerByIdResponse, error)
	GetPlayerByJerseyNumber(context.Context, *GetPlayerUsingJerseyNumberRequest) (*GetPlayerByIdResponse, error)
	DeletePlayer(context.Context, *DeletePlayerRequest) (*Empty, error)
	CompleteKyc(context.Context, *UpdateKyc) (*Empty, error)
	mustEmbedUnimplementedPlayerServiceServer()
}

// UnimplementedPlayerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlayerServiceServer struct {
}

func (UnimplementedPlayerServiceServer) CreatePlayer(context.Context, *CreatePlayerRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlayer not implemented")
}
func (UnimplementedPlayerServiceServer) UpdatePlayerExistingRecord(context.Context, *UpdatePlayerRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlayerExistingRecord not implemented")
}
func (UnimplementedPlayerServiceServer) GetPlayerById(context.Context, *GetPlayerByIdRequest) (*GetPlayerByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerById not implemented")
}
func (UnimplementedPlayerServiceServer) GetPlayerByPhoneNumber(context.Context, *GetPlayerByPhoneNumberRequest) (*GetPlayerByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerByPhoneNumber not implemented")
}
func (UnimplementedPlayerServiceServer) GetPlayerByJerseyNumber(context.Context, *GetPlayerUsingJerseyNumberRequest) (*GetPlayerByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerByJerseyNumber not implemented")
}
func (UnimplementedPlayerServiceServer) DeletePlayer(context.Context, *DeletePlayerRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlayer not implemented")
}
func (UnimplementedPlayerServiceServer) CompleteKyc(context.Context, *UpdateKyc) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteKyc not implemented")
}
func (UnimplementedPlayerServiceServer) mustEmbedUnimplementedPlayerServiceServer() {}

// UnsafePlayerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayerServiceServer will
// result in compilation errors.
type UnsafePlayerServiceServer interface {
	mustEmbedUnimplementedPlayerServiceServer()
}

func RegisterPlayerServiceServer(s grpc.ServiceRegistrar, srv PlayerServiceServer) {
	s.RegisterService(&PlayerService_ServiceDesc, srv)
}

func _PlayerService_CreatePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).CreatePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.PlayerService/CreatePlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).CreatePlayer(ctx, req.(*CreatePlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_UpdatePlayerExistingRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).UpdatePlayerExistingRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.PlayerService/UpdatePlayerExistingRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).UpdatePlayerExistingRecord(ctx, req.(*UpdatePlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_GetPlayerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).GetPlayerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.PlayerService/GetPlayerById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).GetPlayerById(ctx, req.(*GetPlayerByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_GetPlayerByPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerByPhoneNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).GetPlayerByPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.PlayerService/GetPlayerByPhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).GetPlayerByPhoneNumber(ctx, req.(*GetPlayerByPhoneNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_GetPlayerByJerseyNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerUsingJerseyNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).GetPlayerByJerseyNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.PlayerService/GetPlayerByJerseyNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).GetPlayerByJerseyNumber(ctx, req.(*GetPlayerUsingJerseyNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_DeletePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).DeletePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.PlayerService/DeletePlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).DeletePlayer(ctx, req.(*DeletePlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_CompleteKyc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKyc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).CompleteKyc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.PlayerService/CompleteKyc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).CompleteKyc(ctx, req.(*UpdateKyc))
	}
	return interceptor(ctx, in, info, handler)
}

// PlayerService_ServiceDesc is the grpc.ServiceDesc for PlayerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlayerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "player.PlayerService",
	HandlerType: (*PlayerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlayer",
			Handler:    _PlayerService_CreatePlayer_Handler,
		},
		{
			MethodName: "UpdatePlayerExistingRecord",
			Handler:    _PlayerService_UpdatePlayerExistingRecord_Handler,
		},
		{
			MethodName: "GetPlayerById",
			Handler:    _PlayerService_GetPlayerById_Handler,
		},
		{
			MethodName: "GetPlayerByPhoneNumber",
			Handler:    _PlayerService_GetPlayerByPhoneNumber_Handler,
		},
		{
			MethodName: "GetPlayerByJerseyNumber",
			Handler:    _PlayerService_GetPlayerByJerseyNumber_Handler,
		},
		{
			MethodName: "DeletePlayer",
			Handler:    _PlayerService_DeletePlayer_Handler,
		},
		{
			MethodName: "CompleteKyc",
			Handler:    _PlayerService_CompleteKyc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/player.proto",
}
