// Code generated by MockGen. DO NOT EDIT.
// Source: datastore.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/DecodeWorms/server-contract/models"
	gomock "github.com/golang/mock/gomock"
)

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// CreatePlayer mocks base method.
func (m *MockDataStore) CreatePlayer(data models.PersonalInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlayer", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePlayer indicates an expected call of CreatePlayer.
func (mr *MockDataStoreMockRecorder) CreatePlayer(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlayer", reflect.TypeOf((*MockDataStore)(nil).CreatePlayer), data)
}

// CreatePlayerWithFieldsData mocks base method.
func (m *MockDataStore) CreatePlayerWithFieldsData(data models.FieldInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlayerWithFieldsData", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePlayerWithFieldsData indicates an expected call of CreatePlayerWithFieldsData.
func (mr *MockDataStoreMockRecorder) CreatePlayerWithFieldsData(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlayerWithFieldsData", reflect.TypeOf((*MockDataStore)(nil).CreatePlayerWithFieldsData), data)
}

// DeletePlayer mocks base method.
func (m *MockDataStore) DeletePlayer(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlayer", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePlayer indicates an expected call of DeletePlayer.
func (mr *MockDataStoreMockRecorder) DeletePlayer(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlayer", reflect.TypeOf((*MockDataStore)(nil).DeletePlayer), id)
}

// GetPlayer mocks base method.
func (m *MockDataStore) GetPlayer(jerseyNumber string) (*models.FieldInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayer", jerseyNumber)
	ret0, _ := ret[0].(*models.FieldInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayer indicates an expected call of GetPlayer.
func (mr *MockDataStoreMockRecorder) GetPlayer(jerseyNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayer", reflect.TypeOf((*MockDataStore)(nil).GetPlayer), jerseyNumber)
}

// GetPlayerById mocks base method.
func (m *MockDataStore) GetPlayerById(id string) (*models.PersonalInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerById", id)
	ret0, _ := ret[0].(*models.PersonalInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayerById indicates an expected call of GetPlayerById.
func (mr *MockDataStoreMockRecorder) GetPlayerById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerById", reflect.TypeOf((*MockDataStore)(nil).GetPlayerById), id)
}

// GetPlayerByPhoneNumber mocks base method.
func (m *MockDataStore) GetPlayerByPhoneNumber(phoneNumber string) (*models.PersonalInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerByPhoneNumber", phoneNumber)
	ret0, _ := ret[0].(*models.PersonalInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayerByPhoneNumber indicates an expected call of GetPlayerByPhoneNumber.
func (mr *MockDataStoreMockRecorder) GetPlayerByPhoneNumber(phoneNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerByPhoneNumber", reflect.TypeOf((*MockDataStore)(nil).GetPlayerByPhoneNumber), phoneNumber)
}

// GetPlayerWithFieldsInfoById mocks base method.
func (m *MockDataStore) GetPlayerWithFieldsInfoById(id string) (*models.FieldInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerWithFieldsInfoById", id)
	ret0, _ := ret[0].(*models.FieldInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayerWithFieldsInfoById indicates an expected call of GetPlayerWithFieldsInfoById.
func (mr *MockDataStoreMockRecorder) GetPlayerWithFieldsInfoById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerWithFieldsInfoById", reflect.TypeOf((*MockDataStore)(nil).GetPlayerWithFieldsInfoById), id)
}

// UpdatePlayer mocks base method.
func (m *MockDataStore) UpdatePlayer(id string, data *models.PersonalInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlayer", id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePlayer indicates an expected call of UpdatePlayer.
func (mr *MockDataStoreMockRecorder) UpdatePlayer(id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlayer", reflect.TypeOf((*MockDataStore)(nil).UpdatePlayer), id, data)
}

// UpdatePlayerWithFieldsInfo mocks base method.
func (m *MockDataStore) UpdatePlayerWithFieldsInfo(id string, data *models.FieldInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlayerWithFieldsInfo", id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePlayerWithFieldsInfo indicates an expected call of UpdatePlayerWithFieldsInfo.
func (mr *MockDataStoreMockRecorder) UpdatePlayerWithFieldsInfo(id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlayerWithFieldsInfo", reflect.TypeOf((*MockDataStore)(nil).UpdatePlayerWithFieldsInfo), id, data)
}

// MockPlayerStore is a mock of PlayerStore interface.
type MockPlayerStore struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerStoreMockRecorder
}

// MockPlayerStoreMockRecorder is the mock recorder for MockPlayerStore.
type MockPlayerStoreMockRecorder struct {
	mock *MockPlayerStore
}

// NewMockPlayerStore creates a new mock instance.
func NewMockPlayerStore(ctrl *gomock.Controller) *MockPlayerStore {
	mock := &MockPlayerStore{ctrl: ctrl}
	mock.recorder = &MockPlayerStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayerStore) EXPECT() *MockPlayerStoreMockRecorder {
	return m.recorder
}

// CreatePlayer mocks base method.
func (m *MockPlayerStore) CreatePlayer(data models.PersonalInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlayer", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePlayer indicates an expected call of CreatePlayer.
func (mr *MockPlayerStoreMockRecorder) CreatePlayer(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlayer", reflect.TypeOf((*MockPlayerStore)(nil).CreatePlayer), data)
}

// CreatePlayerWithFieldsData mocks base method.
func (m *MockPlayerStore) CreatePlayerWithFieldsData(data models.FieldInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlayerWithFieldsData", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePlayerWithFieldsData indicates an expected call of CreatePlayerWithFieldsData.
func (mr *MockPlayerStoreMockRecorder) CreatePlayerWithFieldsData(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlayerWithFieldsData", reflect.TypeOf((*MockPlayerStore)(nil).CreatePlayerWithFieldsData), data)
}

// DeletePlayer mocks base method.
func (m *MockPlayerStore) DeletePlayer(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlayer", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePlayer indicates an expected call of DeletePlayer.
func (mr *MockPlayerStoreMockRecorder) DeletePlayer(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlayer", reflect.TypeOf((*MockPlayerStore)(nil).DeletePlayer), id)
}

// GetPlayer mocks base method.
func (m *MockPlayerStore) GetPlayer(jerseyNumber string) (*models.FieldInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayer", jerseyNumber)
	ret0, _ := ret[0].(*models.FieldInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayer indicates an expected call of GetPlayer.
func (mr *MockPlayerStoreMockRecorder) GetPlayer(jerseyNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayer", reflect.TypeOf((*MockPlayerStore)(nil).GetPlayer), jerseyNumber)
}

// GetPlayerById mocks base method.
func (m *MockPlayerStore) GetPlayerById(id string) (*models.PersonalInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerById", id)
	ret0, _ := ret[0].(*models.PersonalInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayerById indicates an expected call of GetPlayerById.
func (mr *MockPlayerStoreMockRecorder) GetPlayerById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerById", reflect.TypeOf((*MockPlayerStore)(nil).GetPlayerById), id)
}

// GetPlayerByPhoneNumber mocks base method.
func (m *MockPlayerStore) GetPlayerByPhoneNumber(phoneNumber string) (*models.PersonalInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerByPhoneNumber", phoneNumber)
	ret0, _ := ret[0].(*models.PersonalInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayerByPhoneNumber indicates an expected call of GetPlayerByPhoneNumber.
func (mr *MockPlayerStoreMockRecorder) GetPlayerByPhoneNumber(phoneNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerByPhoneNumber", reflect.TypeOf((*MockPlayerStore)(nil).GetPlayerByPhoneNumber), phoneNumber)
}

// GetPlayerWithFieldsInfoById mocks base method.
func (m *MockPlayerStore) GetPlayerWithFieldsInfoById(id string) (*models.FieldInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerWithFieldsInfoById", id)
	ret0, _ := ret[0].(*models.FieldInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayerWithFieldsInfoById indicates an expected call of GetPlayerWithFieldsInfoById.
func (mr *MockPlayerStoreMockRecorder) GetPlayerWithFieldsInfoById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerWithFieldsInfoById", reflect.TypeOf((*MockPlayerStore)(nil).GetPlayerWithFieldsInfoById), id)
}

// UpdatePlayer mocks base method.
func (m *MockPlayerStore) UpdatePlayer(id string, data *models.PersonalInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlayer", id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePlayer indicates an expected call of UpdatePlayer.
func (mr *MockPlayerStoreMockRecorder) UpdatePlayer(id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlayer", reflect.TypeOf((*MockPlayerStore)(nil).UpdatePlayer), id, data)
}

// UpdatePlayerWithFieldsInfo mocks base method.
func (m *MockPlayerStore) UpdatePlayerWithFieldsInfo(id string, data *models.FieldInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlayerWithFieldsInfo", id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePlayerWithFieldsInfo indicates an expected call of UpdatePlayerWithFieldsInfo.
func (mr *MockPlayerStoreMockRecorder) UpdatePlayerWithFieldsInfo(id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlayerWithFieldsInfo", reflect.TypeOf((*MockPlayerStore)(nil).UpdatePlayerWithFieldsInfo), id, data)
}
